

if ( <bool_expr> ){
	...1
} else {
	...2
}



cmp bool_expr, 1
jne else:
...1
jmp done:
else:
...2 
done:


int x = a * b + c / d;

mul a, b, temp
div c, d temp2
add temp, temp2, x






Mbin('0') = 0 
Mbin('1') = 1 
Mbin(<bin_num> '0') = 2 * Mbin (<bin_num>) 
Mbin(<bin_num> '1') = 2 * Mbin (<bin_num>) + 1 






'1101'

Mbin('1101') => Mbin('110''1')= 2 * Mbin ('110') + 1 = 2 * 6 + 1 = 13
Mbin ('110') => Mbin ('11' '0') = 2 * Mbin ('11') = 2 * 3 = 6
Mbin ('11') => Mbin ('1' '1')= 2 * Mbin ('1') + 1 = 2* 1 + 1 = 3 








'x' '+' '19'

s = {
	...
	'x' : 120
	'y' : 11
}



x = 120;




<while_loop> --> 'while' '(' <BoolExpr> ')' '{' <StatementList> '}'

while( x < 10) { 
	x++; 
	String y = ; 
	} 



LEXICAL `  while( x < 10) { x++; String y = " }     `
SYNTAX`  while( x < 10  { x++;}  `
`  while( x < 10)  {  x = 1234567898765432345678909876543; } `
`  while( true )  {  x = 1234567; } `



RULE OF CONSEQUENCE
 {P} S {Q}, P'=>P, Q=>Q’
--------------------------
 {P'} S {Q'}
 
 
TBD: {x > 5} x = x - 3 {x > 0}


 {P} S {Q}, P'=>P, Q=>Q’
--------------------------
{x > 5} x = x - 3 {x > 0}


 {P} x = x - 3 {Q}, {x > 5}=>P, Q=>{x > 0}
--------------------------
{x > 5} x = x - 3 {x > 0}



{x - 3 > 0} x = x - 3 {x > 0}, {x > 5}=>{x > 3}, {x > 0} =>{x > 0}
--------------------------
{x > 5} x = x - 3 {x > 0}


{x > 5} ==> {x - 3 > 0} = {x > 3}




 {x > 5} x = x - 3 {x > 2}, {x > 5}=>{x > 5}, {x > 2}=>{x > 0}
--------------------------
{x > 5} x = x - 3 {x > 0}






 {P1} S1 {P2}, {P3} S2 {P4}, P2 => P3
-------------------------------
 {P1} S1; S2 {P4}
 
 
{x < 3} 
y = 3 * x + 1;
{y  < 7}
x = y + 3;
{x < 10}



 {P1} 3 * x + 1 {P2}, {P3} x = y + 3 {x < 10}, P2 => P3
-------------------------------
{P1} y = 3 * x + 1; x = y + 3; {x < 10}





 {B and P} S1 {Q}, {(not B) and P} S2 {Q}
----------------------------------------------
 {P} if B then S1 else S2 {Q}
 
 
if x > 0 {
y = y - 1
} else {
y = y + 1
}

{y - 1 > 0} === { y > 1 }
y = y - 1
{y > 0}


{y + 1> 0}==> { y > -1 }
y = y + 1
{y > 0}

Because { y > 1 } ==> { y > -1 } then P is { y > 1 }




while y <> x do y = y + 1 end {y = x}



PROVE TOTAL CORRECTNESS OF A LOOP

1. P ==> I 
2. { B and I } S { I }
3. { !B and I } ===> { Q }
4.  Loop Terminates


while ( y != x ) {
	y++;
}
{y = x}



Q => { y = x}
B => { y != x }
S ==> [ y++ ]

FIND A LOOP INVARIANT I that satisfyies conditions 1 - 4

I =={ y <= x }

1) P = I  Because there is no given P
2)  { B and I } I being { y < = x } satisfies
		S
	{ I }

{( y != x) and (y <= x)} ==> { y < x }
 y = y + 1
{ y <= x }




{( y != x) and (y < x)} ==> { y < x }
 y = y + 1
{ y < x }



{ y < x } =>  { y + 1 <= x }
 y = y + 1
{ y <= x }


3. { !B and I } ===> { Q }
!(y != x) and ( y <=x )	{ y = x}
(y = x) and ( y <=x ) = (y = x) ==> { y = x}

4.. Loop terminates 
GIVEN y <= x
show this loop
while ( y != x ) {
	y++;
}
will terminate


if y == x then the loop never executes
and if y < x we know that the loop will terminate
because we increment y by 1 ever time, because y and x are integers and x > y then ther exist some interger n were n = x - y
so we know this loop will excute exactly n timesl




{n > 0} 
count = n;
{count > 0, n > 0, count = n} 
sum = 0;


{count > 0, n > 0, count = n, sum = 0} => {count >= 0}
while count != 0 
 sum = sum + count;
 count = count - 1;
end
{sum = 1 + 2 + . . . + n}


PROVE TOTAL CORRECTNESS OF A LOOP
1. P ==> I TRUE
2. { B and I } S { I } TRUE FOR {count >= 0}
3. { !B and I } ===> { Q }
4.  Loop Terminates

{count >= 0}							{count > 0}
and										and
count != 0 								count != 0

{count > 0}								{count > 0}
 sum = sum + count;						 sum = sum + count;
 count = count - 1;	                     count = count - 1;
{count >= 0}						    {count > 0}


{count > 0}								{count > 0}
 sum = sum + count;						 sum = sum + count;
 

{count > 0}								{count > 0}
 count = count - 1;	                     count = count - 1;
{count >= 0}						    {count > 0}
count > 0 
count > count - 1
count > count - 1 >= 0 
	
	
	
{count >= 0}							{count > 0}
and	not									and not
count != 0 								count != 0


{count >= 0}							
and										
count = 0 								
{count = n, sum = 0}
{count = 0} ==> { sum == 1 + ... + n } ==> {sum = 0 }								



Prove that (n + 1) * ... * n = 1








 {B and P} S1 {Q}, {(not B) and P} S2 {Q}
----------------------------------------------
 {P} if B then S1 else S2 {Q}

{ a > 0 }
if (a == b) 
 b = 2 * a + 1
else
 b = 2 * a;
{b > 1}



{ x < -1 }
if (x < y)
{x + 1 < 0} ==> { x < -1 }
 x = x + 1
else
{3 * x < 0} ==> { x < 0 } 
 x = 3 * x
{x < 0}




{ x > 3}==> { x > 1 }
if (x > y)
 y = 2 * x + 1
else
 y = 3 * x - 1;
{y > 3}

{ 2* b + 1 < 3 } ==> { b < 1 } 
a = 2 * b + 1;
{ a - 3 < 0 } ==> { a < 3 }
b = a - 3
{b < 0}

{ 3 * ( 2  * b + a ) > 3} ==> { 2 * b + a > 1} 
a = 3 * (2 * b + a);
{a > 3}
b = 2 * a - 1
{b > 5}



Java do-while
Java Boolean expressions


Java for

<ForLoop> --> 'for' '(' [ForInit] ';' [Expression] ';' [ForUpdate] ')' <StatementList>

Mfor(for([ForInit];[Expression];[ForUpdate]) SL, s)


Mfor(for(;;) SL, s)
Mfor(for(INIT;EXPR;UPDATE) SL, s) ==> if Minit(INIT, s) == error
										return error
									  else	
										s1 = Minit(INIT, s)
										if Mexpr( EXPR, s1) == error
											return error
										else if Mbool( EXPR, s1) == false
											return s1
										else 
											s2 = Mexpr( EXPR, s1 ) 
											if Msl( SL, s2 ) == error
												return error
											else	
												s3 = Msl(SL, s2)
												if Mupdate(UPDATE, s3) == error	
													return error
												s4 = Mupdate(UPDATE, s3)
												Mfor(for(;EXPR;UPDATE)SL, s4)

